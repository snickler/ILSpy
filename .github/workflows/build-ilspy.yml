name: Build ILSpy

on:
  push:
    branches: '**'
  pull_request:
    branches: [ master, release/** ]

jobs:
  Build:
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        include:
          - configuration: debug
            solution: ilspy.sln
            channel: zip
            platform: arm64
          - configuration: release
            solution: ilspy.sln
            channel: zip
            platform: arm64
          - configuration: release
            solution: ilspy.withpackage.sln
            channel: ci
            platform: arm64
          - configuration: release
            solution: ilspy.withpackage.sln
            channel: store
            platform: arm64
    env:
      BuildPlatform: Any CPU
      StagingDirectory: buildartifacts 
      TargetFramework: net5.0-windows

    steps:
    - run: mkdir -Force $env:StagingDirectory
      
    - name: Force git to use crlf, otherwise dotnet-format --check fails
      run: git config --global core.autocrlf true
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x


    - name: Install dotnet-format
      run: dotnet tool install dotnet-format --global --version 5.1.225507

    - name: Get Version
      id: version
      shell: pwsh
      run: |
        .\BuildTools\ghactions-install.ps1
        Get-ChildItem Env: | Where-Object {$_.Name -Match "^ILSPY_"} | %{ echo "::set-output name=$($_.Name)::$($_.Value)" }

    - run: cp multitargeting.props.template multitargeting.props -Force

    - name: Restore the application
      run: |
        $env:Path+=";C:\Program Files\Microsoft Visual Studio\2022\Preview\MSBuild\Current\Bin\amd64"
        msbuild ${{ matrix.solution }} /t:Restore /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }}

    - name: Build
      run: |
        $env:Path+=";C:\Program Files\Microsoft Visual Studio\2022\Preview\MSBuild\Current\Bin\amd64"
        msbuild ${{ matrix.solution }} /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }} /p:AppxPackageDir="${{ github.workspace }}\${{ env.StagingDirectory }}\${{ matrix.channel }}\" 
      env:
        ReleaseChannel: ${{ matrix.channel }}

    - name: Execute unit tests
      run: dotnet test $env:Tests1 $env:Tests2 $env:Tests3
      env:
        Tests1: ICSharpCode.Decompiler.Tests\bin\${{ matrix.configuration }}\${{ env.TargetFramework }}\ICSharpCode.Decompiler.Tests.exe
        Tests2: ILSpy.Tests\bin\${{ matrix.configuration }}\${{ env.TargetFramework }}\ILSpy.Tests.exe
        Tests3: ILSpy.BamlDecompiler.Tests\bin\${{ matrix.configuration }}\${{ env.TargetFramework }}\ILSpy.BamlDecompiler.Tests.exe

    - name: Style - tab check
      run: python BuildTools\tidy.py
    
    - name: Zip ILSpy Release
      if: matrix.channel == 'zip'
      # run: 7z a -tzip $env:StagingDirectory\ILSpy_binaries.zip .\ILSpy\bin\${{ matrix.configuration }}\${{ env.TargetFramework }}\*
      run: 7z a -tzip $env:StagingDirectory\ILSpy_binaries.zip .\ILSpy\bin\${{ matrix.configuration }}\${{ env.TargetFramework }}\*.dll .\ILSpy\bin\${{ matrix.configuration }}\${{ env.TargetFramework }}\*.exe .\ILSpy\bin\${{ matrix.configuration }}\${{ env.TargetFramework }}\*.config .\ILSpy\bin\${{ matrix.configuration }}\${{ env.TargetFramework }}\*\ILSpy.resources.dll .\ILSpy\bin\${{ matrix.configuration }}\${{ env.TargetFramework }}\*\ILSpy.ReadyToRun.Plugin.resources.dll
      
    # https://github.com/actions/upload-artifact
    - name: Upload Store build artifacts
      if: matrix.channel == 'store'
      uses: actions/upload-artifact@v2
      with:
        name: MSIX Store Package
        path: ${{ env.StagingDirectory }}\${{ matrix.channel }}\*.*
        if-no-files-found: error

    - name: Upload VSIX release build artifacts
      if: matrix.channel == 'zip' && matrix.configuration == 'release'
      uses: actions/upload-artifact@v2
      with:
        name: ILSpy VS Addin ${{ steps.version.outputs.ILSPY_VERSION_NUMBER }} (${{ matrix.configuration }})
        path: ILSpy.Addin\bin\${{ matrix.configuration }}\${{ env.TargetFramework }}\*.vsix
        if-no-files-found: error

    - name: Upload NuGet release build artifacts
      if: matrix.channel == 'zip' && matrix.configuration == 'release'
      uses: actions/upload-artifact@v2
      with:
        name: ICSharpCode.Decompiler NuGet Package (${{ matrix.configuration }})
        path: ICSharpCode.Decompiler\bin\Release\ICSharpCode.Decompiler*.nupkg
        if-no-files-found: error

    - name: Publish NuGet
      if: github.ref == 'refs/heads/master' && matrix.channel == 'zip' && matrix.configuration == 'release'
      run: |
        dotnet nuget push "ICSharpCode.Decompiler\bin\Release\ICSharpCode.Decompiler*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/${{ github.repository_owner }}
      
    - name: Upload zip release build artifacts
      if: matrix.channel == 'zip'
      uses: actions/upload-artifact@v2
      with:
        name: ILSpy ${{ steps.version.outputs.ILSPY_VERSION_NUMBER }} (${{ matrix.configuration }})
        path: ${{ env.StagingDirectory }}\ILSpy_binaries.zip
        if-no-files-found: error
